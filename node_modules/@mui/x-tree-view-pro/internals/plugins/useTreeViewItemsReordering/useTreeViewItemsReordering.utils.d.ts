import { TreeViewInstance, UseTreeViewItemsSignature, UseTreeViewItemsState } from '@mui/x-tree-view/internals';
import { TreeViewItemId, TreeViewItemsReorderingAction } from '@mui/x-tree-view/models';
import { TreeViewItemItemReorderingValidActions, TreeViewItemReorderPosition } from './useTreeViewItemsReordering.types';
/**
 * Checks if the item with the id itemIdB is an ancestor of the item with the id itemIdA.
 */
export declare const isAncestor: (instance: TreeViewInstance<[UseTreeViewItemsSignature]>, itemIdA: string, itemIdB: string) => boolean;
interface GetNewPositionParams {
    itemChildrenIndentation: string | number;
    validActions: TreeViewItemItemReorderingValidActions;
    targetHeight: number;
    targetDepth: number;
    cursorY: number;
    cursorX: number;
    contentElement: HTMLDivElement;
}
export declare const chooseActionToApply: ({ itemChildrenIndentation, validActions, targetHeight, targetDepth, cursorX, cursorY, contentElement, }: GetNewPositionParams) => TreeViewItemsReorderingAction | null;
export declare const moveItemInTree: <R extends {
    children?: R[];
}>({ itemToMoveId, oldPosition, newPosition, prevState, }: {
    itemToMoveId: TreeViewItemId;
    oldPosition: TreeViewItemReorderPosition;
    newPosition: TreeViewItemReorderPosition;
    prevState: UseTreeViewItemsState<R>["items"];
}) => UseTreeViewItemsState<R>["items"];
export {};
