"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RichTreeViewProRoot = exports.RichTreeViewPro = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _composeClasses = _interopRequireDefault(require("@mui/utils/composeClasses"));
var _xLicense = require("@mui/x-license");
var _useSlotProps = _interopRequireDefault(require("@mui/utils/useSlotProps"));
var _TreeItem = require("@mui/x-tree-view/TreeItem");
var _internals = require("@mui/x-tree-view/internals");
var _zeroStyled = require("../internals/zero-styled");
var _richTreeViewProClasses = require("./richTreeViewProClasses");
var _RichTreeViewPro = require("./RichTreeViewPro.plugins");
var _releaseInfo = require("../internals/utils/releaseInfo");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const useThemeProps = (0, _zeroStyled.createUseThemeProps)('MuiRichTreeViewPro');
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['root']
  };
  return (0, _composeClasses.default)(slots, _richTreeViewProClasses.getRichTreeViewProUtilityClass, classes);
};
const RichTreeViewProRoot = exports.RichTreeViewProRoot = (0, _zeroStyled.styled)('ul', {
  name: 'MuiRichTreeViewPro',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({
  padding: 0,
  margin: 0,
  listStyle: 'none',
  outline: 0,
  position: 'relative'
});
function WrappedTreeItem({
  slots,
  slotProps,
  label,
  id,
  itemId,
  children
}) {
  const Item = slots?.item ?? _TreeItem.TreeItem;
  const itemProps = (0, _useSlotProps.default)({
    elementType: Item,
    externalSlotProps: slotProps?.item,
    additionalProps: {
      itemId,
      id,
      label
    },
    ownerState: {
      itemId,
      label
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Item, (0, _extends2.default)({}, itemProps, {
    children: children
  }));
}
process.env.NODE_ENV !== "production" ? WrappedTreeItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * The id of the item.
   */
  itemId: _propTypes.default.string.isRequired,
  label: _propTypes.default.string.isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object
} : void 0;
const releaseInfo = (0, _releaseInfo.getReleaseInfo)();

/**
 *
 * Demos:
 *
 * - [Tree View](https://mui.com/x/react-tree-view/)
 *
 * API:
 *
 * - [RichTreeView API](https://mui.com/x/api/tree-view/rich-tree-view/)
 */
const RichTreeViewPro = exports.RichTreeViewPro = /*#__PURE__*/React.forwardRef(function RichTreeViewPro(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'MuiRichTreeViewPro'
  });
  (0, _xLicense.useLicenseVerifier)('x-tree-view-pro', releaseInfo);
  if (process.env.NODE_ENV !== 'production') {
    if (props.children != null) {
      (0, _internals.warnOnce)(['MUI X: The `RichTreeViewPro` component does not support JSX children.', 'If you want to add items, you need to use the `items` prop.', 'Check the documentation for more details: https://mui.com/x/react-tree-view/rich-tree-view/items/.']);
    }
  }
  const {
    getRootProps,
    contextValue,
    instance
  } = (0, _internals.useTreeView)({
    plugins: _RichTreeViewPro.RICH_TREE_VIEW_PRO_PLUGINS,
    rootRef: ref,
    props
  });
  const {
    slots,
    slotProps
  } = props;
  const classes = useUtilityClasses(props);
  const Root = slots?.root ?? RichTreeViewProRoot;
  const rootProps = (0, _useSlotProps.default)({
    elementType: Root,
    externalSlotProps: slotProps?.root,
    className: classes.root,
    getSlotProps: getRootProps,
    ownerState: props
  });
  const itemsToRender = instance.getItemsToRender();
  const renderItem = ({
    label,
    itemId,
    id,
    children
  }) => {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedTreeItem, {
      slots: slots,
      slotProps: slotProps,
      label: label,
      id: id,
      itemId: itemId,
      children: children?.map(renderItem)
    }, itemId);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_internals.TreeViewProvider, {
    value: contextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
      children: [itemsToRender.map(renderItem), /*#__PURE__*/(0, _jsxRuntime.jsx)(_xLicense.Watermark, {
        packageName: "x-tree-view-pro",
        releaseInfo: releaseInfo
      })]
    }))
  });
});
process.env.NODE_ENV !== "production" ? RichTreeViewPro.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The ref object that allows Tree View manipulation. Can be instantiated with `useTreeViewApiRef()`.
   */
  apiRef: _propTypes.default.shape({
    current: _propTypes.default.shape({
      focusItem: _propTypes.default.func.isRequired,
      getItem: _propTypes.default.func.isRequired,
      getItemDOMElement: _propTypes.default.func.isRequired,
      getItemOrderedChildrenIds: _propTypes.default.func.isRequired,
      getItemTree: _propTypes.default.func.isRequired,
      selectItem: _propTypes.default.func.isRequired,
      setItemExpansion: _propTypes.default.func.isRequired
    })
  }),
  /**
   * Used to determine if a given item can move to some new position.
   * @param {object} params The params describing the item re-ordering.
   * @param {string} params.itemId The id of the item to check.
   * @param {TreeViewItemReorderPosition} params.oldPosition The old position of the item.
   * @param {TreeViewItemReorderPosition} params.newPosition The new position of the item.
   * @returns {boolean} `true` if the item can move to the new position.
   */
  canMoveItemToNewPosition: _propTypes.default.func,
  /**
   * If `true`, the tree view renders a checkbox at the left of its label that allows selecting it.
   * @default false
   */
  checkboxSelection: _propTypes.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  className: _propTypes.default.string,
  /**
   * Expanded item ids.
   * Used when the item's expansion is not controlled.
   * @default []
   */
  defaultExpandedItems: _propTypes.default.arrayOf(_propTypes.default.string),
  /**
   * Selected item ids. (Uncontrolled)
   * When `multiSelect` is true this takes an array of strings; when false (default) a string.
   * @default []
   */
  defaultSelectedItems: _propTypes.default.any,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: _propTypes.default.bool,
  /**
   * If `true` selection is disabled.
   * @default false
   */
  disableSelection: _propTypes.default.bool,
  /**
   * Expanded item ids.
   * Used when the item's expansion is controlled.
   */
  expandedItems: _propTypes.default.arrayOf(_propTypes.default.string),
  /**
   * The slot that triggers the item's expansion when clicked.
   * @default 'content'
   */
  expansionTrigger: _propTypes.default.oneOf(['content', 'iconContainer']),
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`,
   * the feature will be fully disabled and any property / method call will not have any effect.
   */
  experimentalFeatures: _propTypes.default.shape({
    indentationAtItemLevel: _propTypes.default.bool,
    itemsReordering: _propTypes.default.bool
  }),
  /**
   * Used to determine the id of a given item.
   *
   * @template R
   * @param {R} item The item to check.
   * @returns {string} The id of the item.
   * @default (item) => item.id
   */
  getItemId: _propTypes.default.func,
  /**
   * Used to determine the string label for a given item.
   *
   * @template R
   * @param {R} item The item to check.
   * @returns {string} The label of the item.
   * @default (item) => item.label
   */
  getItemLabel: _propTypes.default.func,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: _propTypes.default.string,
  /**
   * Used to determine if a given item should be disabled.
   * @template R
   * @param {R} item The item to check.
   * @returns {boolean} `true` if the item should be disabled.
   */
  isItemDisabled: _propTypes.default.func,
  /**
   * Used to determine if a given item can be reordered.
   * @param {string} itemId The id of the item to check.
   * @returns {boolean} `true` if the item can be reordered.
   * @default () => true
   */
  isItemReorderable: _propTypes.default.func,
  /**
   * Horizontal indentation between an item and its children.
   * Examples: 24, "24px", "2rem", "2em".
   * @default 12px
   */
  itemChildrenIndentation: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  items: _propTypes.default.array.isRequired,
  /**
   * If `true`, the reordering of items is enabled.
   * Make sure to also enable the `itemsReordering` experimental feature:
   * `<RichTreeViewPro experimentalFeatures={{ itemsReordering: true }} itemsReordering />`.
   * @default false
   */
  itemsReordering: _propTypes.default.bool,
  /**
   * If `true`, `ctrl` and `shift` will trigger multiselect.
   * @default false
   */
  multiSelect: _propTypes.default.bool,
  /**
   * Callback fired when tree items are expanded/collapsed.
   * @param {React.SyntheticEvent} event The DOM event that triggered the change.
   * @param {array} itemIds The ids of the expanded items.
   */
  onExpandedItemsChange: _propTypes.default.func,
  /**
   * Callback fired when the `content` slot of a given tree item is clicked.
   * @param {React.MouseEvent} event The DOM event that triggered the change.
   * @param {string} itemId The id of the focused item.
   */
  onItemClick: _propTypes.default.func,
  /**
   * Callback fired when a tree item is expanded or collapsed.
   * @param {React.SyntheticEvent} event The DOM event that triggered the change.
   * @param {array} itemId The itemId of the modified item.
   * @param {array} isExpanded `true` if the item has just been expanded, `false` if it has just been collapsed.
   */
  onItemExpansionToggle: _propTypes.default.func,
  /**
   * Callback fired when a given tree item is focused.
   * @param {React.SyntheticEvent | null} event The DOM event that triggered the change. **Warning**: This is a generic event not a focus event.
   * @param {string} itemId The id of the focused item.
   */
  onItemFocus: _propTypes.default.func,
  /**
   * Callback fired when a tree item is moved in the tree.
   * @param {object} params The params describing the item re-ordering.
   * @param {string} params.itemId The id of the item moved.
   * @param {TreeViewItemReorderPosition} params.oldPosition The old position of the item.
   * @param {TreeViewItemReorderPosition} params.newPosition The new position of the item.
   */
  onItemPositionChange: _propTypes.default.func,
  /**
   * Callback fired when a tree item is selected or deselected.
   * @param {React.SyntheticEvent} event The DOM event that triggered the change.
   * @param {array} itemId The itemId of the modified item.
   * @param {array} isSelected `true` if the item has just been selected, `false` if it has just been deselected.
   */
  onItemSelectionToggle: _propTypes.default.func,
  /**
   * Callback fired when tree items are selected/deselected.
   * @param {React.SyntheticEvent} event The DOM event that triggered the change.
   * @param {string[] | string} itemIds The ids of the selected items.
   * When `multiSelect` is `true`, this is an array of strings; when false (default) a string.
   */
  onSelectedItemsChange: _propTypes.default.func,
  /**
   * Selected item ids. (Controlled)
   * When `multiSelect` is true this takes an array of strings; when false (default) a string.
   */
  selectedItems: _propTypes.default.any,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;